// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharijhaAward.Persistence;

#nullable disable

namespace SharijhaAward.Persistence.Migrations
{
    [DbContext(typeof(SharijhaAwardDbContext))]
    [Migration("20240415132506_AddOrderByCreatedAtColumn")]
    partial class AddOrderByCreatedAtColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SharijhaAward.Domain.Entities.AboutAwardPageModel.AboutAwardPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicAboutDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicAboutTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicOurVisionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicOurVisionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishAboutDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishAboutTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishOurVisionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishOurVisionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OurVisionImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_AboutAwardPage_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("AboutAwardPage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AboutImage = "https://backend.stg.award-shj.ae/UploadedFiles/02ef2561-b108-4b12-8a3f-6734b4e0345f.jpg",
                            ArabicAboutDescription = "تأسست جائزة الشارقة للتفوق والتميز التربوي عام 1994-1995 برعاية كريمة من صاحب السمو الشيخ الدكتور سلطان بن محمد القاسمي عضو المجلس الاعلى حاكم إمارة الشارقة حفظه الله ورعاه... وتعتبر أول جائزة تربوية على مستوى الدولة",
                            ArabicAboutTitle = "نبذة عن الجائزة",
                            ArabicOurVisionDescription = "تأسست جائزة الشارقة للتفوق والتميز التربوي عام 1994-1995 برعاية كريمة من صاحب السمو الشيخ الدكتور سلطان بن محمد القاسمي عضو المجلس الاعلى حاكم إمارة الشارقة حفظه الله ورعاه... وتعتبر أول جائزة تربوية على مستوى الدولة",
                            ArabicOurVisionTitle = "رؤيتنا",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3400),
                            EnglishAboutDescription = "The Sharjah Award for Educational Excellence and Excellence was established in 1994-1995 under the generous patronage of His Highness Sheikh Dr. Sultan bin Muhammad Al Qasimi, Member of the Supreme Council and Ruler of the Emirate of Sharjah, may God protect and preserve him... It is considered the first educational award at the state level.",
                            EnglishAboutTitle = "About the award",
                            EnglishOurVisionDescription = "The Sharjah Award for Educational Excellence and Excellence was established in 1994-1995 under the generous patronage of His Highness Sheikh Dr. Sultan bin Muhammad Al Qasimi, Member of the Supreme Council and Ruler of the Emirate of Sharjah, may God protect and preserve him... It is considered the first educational award at the state level.",
                            EnglishOurVisionTitle = "Our Vision",
                            OurVisionImage = "https://backend.stg.award-shj.ae/UploadedFiles/02ef2561-b108-4b12-8a3f-6734b4e0345f.jpg",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.AboutAwardPageModel.OurGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AboutAwardPageId")
                        .HasColumnType("int");

                    b.Property<string>("ArabicGoal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishGoal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AboutAwardPageId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_OurGoal_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("OurGoals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AboutAwardPageId = 1,
                            ArabicGoal = "تطوير القطاع التربوي من خلال بث روح التنافس بينهم؛ لتحقيق أفضل الممارسات التربوية.",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3475),
                            EnglishGoal = "Developing the educational sector by spreading the spirit of competition among them; To achieve best educational practices.",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            AboutAwardPageId = 1,
                            ArabicGoal = "طوير أعمال الجائزة ومنهجياتها، ورفع الكفايات المهنية للعاملين بها.",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3480),
                            EnglishGoal = "Developing the Award’s work and methodologies, and raising the professional competencies of its employees.",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.AchievementModel.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistinctionField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkedin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Projects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillsAndExperiences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Snapchat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tiktok")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDistinctionField")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateProjects")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateSkillsAndExperiences")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateSocialMedia")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Youtube")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Achievement_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("UserId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.AgendaModel.Agenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CurrentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<int>("DateType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Agenda_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("CycleId");

                    b.ToTable("Agendas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicTitle = "اختبار عنوان جدول أعمال 1",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8387),
                            CurrentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CycleId = 1,
                            DateType = 1,
                            EndDate = new DateTime(2024, 4, 25, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8395),
                            EnglishTitle = "Test Agenda Titile 1",
                            Icon = "https://backend.stg.award-shj.ae/UploadedFiles/cancel (1) (1).png",
                            StartDate = new DateTime(2024, 4, 20, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8402),
                            Status = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicTitle = "اختبار عنوان جدول أعمال 2",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8405),
                            CurrentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CycleId = 1,
                            DateType = 0,
                            EndDate = new DateTime(2024, 4, 30, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8407),
                            EnglishTitle = "Test Agenda Titile 2",
                            Icon = "https://backend.stg.award-shj.ae/UploadedFiles/cancel (1) (2).png",
                            StartDate = new DateTime(2024, 4, 25, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8409),
                            Status = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            ArabicTitle = "اختبار عنوان جدول أعمال 3",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8411),
                            CurrentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CycleId = 1,
                            DateType = 2,
                            EndDate = new DateTime(2024, 5, 5, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8414),
                            EnglishTitle = "Test Agenda Titile 3",
                            Icon = "https://backend.stg.award-shj.ae/UploadedFiles/cancel (1).png",
                            StartDate = new DateTime(2024, 4, 30, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8415),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            ArabicTitle = "اختبار عنوان جدول أعمال 4",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8417),
                            CurrentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CycleId = 1,
                            DateType = 2,
                            EndDate = new DateTime(2024, 5, 10, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8420),
                            EnglishTitle = "Test Agenda Titile 4",
                            Icon = "https://backend.stg.award-shj.ae/UploadedFiles/cancel (1).png",
                            StartDate = new DateTime(2024, 5, 5, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8421),
                            Status = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            ArabicTitle = "اختبار عنوان جدول أعمال 5",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8424),
                            CurrentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CycleId = 1,
                            DateType = 2,
                            EndDate = new DateTime(2024, 5, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8426),
                            EnglishTitle = "Test Agenda Titile 5",
                            Icon = "https://backend.stg.award-shj.ae/UploadedFiles/cancel (1).png",
                            StartDate = new DateTime(2024, 5, 10, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8427),
                            Status = 2,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.AppVersioningModel.AppVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppleLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GooglePlayLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatesOnVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VersionNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("isRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_AppVersion_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("AppVersions");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ArbitrationModel.Arbitration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArbitratorId")
                        .HasColumnType("int");

                    b.Property<int>("ProvidedFormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArbitratorId");

                    b.HasIndex("ProvidedFormId");

                    b.ToTable("Arbitration");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ArbitrationProcedureModel.ArbitrationProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicGuidDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishGuidDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("ImprovementAreas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrengthPoints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArbitrationProcedure_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ArbitrationProcedure");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ArbitratorClassModel.ArbitratorClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArbitratorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationalClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ArbitratorId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ArbitratorClass_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("EducationalClassId");

                    b.ToTable("ArbitratorClasses");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ArbitratorInterviewModel.ArbitratorInterview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArbitratorId")
                        .HasColumnType("int");

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArbitratorId");

                    b.HasIndex("InterviewId");

                    b.ToTable("ArbitratorInterview");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ArbitratorModel.Arbitrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Arbitrator_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("Arbitrators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicName = "",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(2982),
                            Email = "",
                            EnglishName = "",
                            PhoneNumber = "",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.AttachmentModel.ConditionAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachementPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConditionsProvidedFormsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SizeOfAttachmentInKB")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ConditionsProvidedFormsId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ConditionAttachment_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("ConditionAttachments");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CategoryArbitratorModel.CategoryArbitrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArbitratorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ArbitratorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_CategoryArbitrator_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("CategoriesArbitrators");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CategoryCommitteeModel.CategoryCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CommitteeId")
                        .HasColumnType("int");

                    b.Property<int>("CommitteesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_CategoryCommittee_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("CategoryCommittees");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CategoryEducationalClassModel.CategoryEducationalClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationalClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfExpectedWinners")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_CategoryEducationalClass_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("EducationalClassId");

                    b.ToTable("CategoryEducationalClasses");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CategoryFAQ.CategoryFAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_CategoryFAQ_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("CategoryFAQs");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CategoryModel.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryClassification")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExpectedNumberOfWinners")
                        .HasColumnType("int");

                    b.Property<float?>("FinalArbitrationQualificationMark")
                        .HasColumnType("real");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("MinimumAmountToObtainACertificateOfParticipation")
                        .HasColumnType("real");

                    b.Property<float?>("MinimumAmountToParticipateInTheAward")
                        .HasColumnType("real");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<bool?>("RelatedToClasses")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float?>("WinningScore")
                        .HasColumnType("real");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Category_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("CycleId");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicDescription = "اختبار وصف 1",
                            ArabicName = "اختبار اسم 1",
                            CategoryClassification = 0,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8736),
                            CycleId = 1,
                            EnglishDescription = "Test Description 1",
                            EnglishName = "Test Name 1",
                            ExpectedNumberOfWinners = 1,
                            FinalArbitrationQualificationMark = 0f,
                            Icon = "string",
                            RelatedToClasses = false,
                            Status = 0,
                            WinningScore = 0f,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicDescription = "اختبار وصف 2",
                            ArabicName = "اختبار اسم 2",
                            CategoryClassification = 0,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8758),
                            CycleId = 1,
                            EnglishDescription = "Test Description 2",
                            EnglishName = "Test Name 2",
                            ExpectedNumberOfWinners = 1,
                            FinalArbitrationQualificationMark = 0f,
                            Icon = "string",
                            ParentId = 1,
                            RelatedToClasses = false,
                            Status = 0,
                            WinningScore = 0f,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CommitteeModel.Committee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ChairmanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ChairmanId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Committee_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("Committees");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ConditionsProvidedFormsModel.ConditionsProvidedForms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAgree")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvidedFormId")
                        .HasColumnType("int");

                    b.Property<int>("TermAndConditionId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ConditionsProvidedForms_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("ProvidedFormId");

                    b.HasIndex("TermAndConditionId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CoordinatorModel.Coordinator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Emirates")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Coordinator_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("Coordinators");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            ArabicName = "منسق 1",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9065),
                            EducationType = 0,
                            Email = "Coordinator@Coordinator.com",
                            Emirates = 5,
                            EnglishName = "Coordinator 1",
                            PersonalPhoto = "https://backend.stg.award-shj.ae/UploadedFiles/02ef2561-b108-4b12-8a3f-6734b4e0345f.jpg",
                            PhoneNumber = "0993521579",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 11,
                            ArabicName = "منسق 2",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9071),
                            EducationType = 0,
                            Email = "Coordinator2@Coordinator2.com",
                            Emirates = 2,
                            EnglishName = "Coordinator 2",
                            PersonalPhoto = "https://backend.stg.award-shj.ae/UploadedFiles/e6258b6f-5ca5-4168-bb7c-fe1f24a6e553.jpg",
                            PhoneNumber = "0993521579",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 12,
                            ArabicName = "منسق 3",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9094),
                            EducationType = 1,
                            Email = "Coordinator3@Coordinator3.com",
                            Emirates = 1,
                            EnglishName = "Coordinator 3",
                            PersonalPhoto = "https://backend.stg.award-shj.ae/UploadedFiles/eecad556-2d56-4010-b10a-780f7500f693.png",
                            PhoneNumber = "0993521579",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 13,
                            ArabicName = "منسق 4",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9098),
                            EducationType = 1,
                            Email = "Coordinator4@Coordinator4.com",
                            Emirates = 2,
                            EnglishName = "Coordinator 4",
                            PersonalPhoto = "https://backend.stg.award-shj.ae/UploadedFiles/eecad556-2d56-4010-b10a-780f7500f693.png",
                            PhoneNumber = "0993521579",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CriterionItemModel.CriterionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActualScore")
                        .HasColumnType("int");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CriterionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScaleId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("SizeOfAttachmentInKB")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_CriterionItem_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("CriterionId");

                    b.HasIndex("ScaleId");

                    b.ToTable("CriterionItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActualScore = 0,
                            ArabicName = "بند معيار فرعي 11",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(8430),
                            CriterionId = 2,
                            EnglishName = "Sub Criterion Item 11",
                            Score = 50,
                            SizeOfAttachmentInKB = 5000,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ActualScore = 0,
                            ArabicName = "بند معيار فرعي 12",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(8435),
                            CriterionId = 2,
                            EnglishName = "Sub Criterion Item 12",
                            Score = 50,
                            SizeOfAttachmentInKB = 5000,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            ActualScore = 0,
                            ArabicName = "بند معيار فرعي 21",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(8439),
                            CriterionId = 3,
                            EnglishName = "Sub Criterion Item 21",
                            Score = 50,
                            SizeOfAttachmentInKB = 5000,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            ActualScore = 0,
                            ArabicName = "بند معيار فرعي 22",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(8448),
                            CriterionId = 3,
                            EnglishName = "Sub Criterion Item 22",
                            Score = 50,
                            SizeOfAttachmentInKB = 5000,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CriterionItemModel.CriterionItemAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachementPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CriterionItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvidedFormId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_CriterionItemAttachment_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("CriterionItemId");

                    b.HasIndex("ProvidedFormId");

                    b.ToTable("CriterionItemAttachments");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CriterionItemScaleModel.CriterionItemScale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CriterionItemId")
                        .HasColumnType("int");

                    b.Property<int>("CriterionItemsId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScaleId")
                        .HasColumnType("int");

                    b.Property<int>("ScalesId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_CriterionItemScale_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("CriterionItemId");

                    b.HasIndex("ScaleId");

                    b.ToTable("CriterionItemScales");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CriterionModel.Criterion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ArbitrationProcedureId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SizeOfAttachmentInKB")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ArbitrationProcedureId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Criterion_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("ParentId");

                    b.ToTable("Criterions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicTitle = "معيار رئيسي 1",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(8312),
                            EnglishTitle = "Main Criterion 1",
                            Score = 100,
                            SizeOfAttachmentInKB = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicTitle = "معيار فرعي 1",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(8321),
                            EnglishTitle = "Sub Criterion 1",
                            ParentId = 1,
                            Score = 50,
                            SizeOfAttachmentInKB = 5000,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            ArabicTitle = "معيار فرعي 2",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(8326),
                            EnglishTitle = "Sub Criterion 2",
                            ParentId = 1,
                            Score = 50,
                            SizeOfAttachmentInKB = 5000,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CriterionModel.CriterionAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachementPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CriterionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvidedFormId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_CriterionAttachment_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("CriterionId");

                    b.HasIndex("ProvidedFormId");

                    b.ToTable("CriterionAttachments");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CycleConditionModel.CycleCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AttachmentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAgree")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NeedAttachment")
                        .HasColumnType("bit");

                    b.Property<int?>("RequiredAttachmentNumber")
                        .HasColumnType("int");

                    b.Property<int?>("SizeOfAttachmentInKB")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_CycleCondition_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("CycleId");

                    b.ToTable("CycleCondition");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CycleConditionsProvidedFormModel.CycleConditionsProvidedForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CycleConditionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAgree")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvidedFormId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_CycleConditionsProvidedForm_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("CycleConditionId");

                    b.HasIndex("ProvidedFormId");

                    b.ToTable("CycleConditionsProvidedForms");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CycleModel.Cycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CycleNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FinalArbitrationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinalArbitrationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupCategoryNumber")
                        .HasColumnType("int");

                    b.Property<int>("IndividualCategoryNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InitialArbitrationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InitialArbitrationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MarginOfDifferenceBetweenArbitrators")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationPortalClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegistrationPortalOpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubscriberPortalClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TheUpperLimitForObtainingInformation")
                        .HasColumnType("int");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Cycle_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("Cycles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicName = "جائزة الشارقة",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CycleNumber = 0,
                            EnglishName = "SharijhaAward",
                            GroupCategoryNumber = 10,
                            IndividualCategoryNumber = 10,
                            MarginOfDifferenceBetweenArbitrators = 0,
                            RegistrationPortalClosingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationPortalOpeningDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TheUpperLimitForObtainingInformation = 0,
                            Year = "2023-2024",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.AttributeDataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_AttributeDataType_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("AttributeDataTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3913),
                            Name = "Text",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3916),
                            Name = "Email",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3922),
                            Name = "Image",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3925),
                            Name = "File",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3928),
                            Name = "Phone Number",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3930),
                            Name = "Number",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3933),
                            Name = "Date",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3936),
                            Name = "List",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.AttributeOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationAsString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_AttributeOperation_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("AttributeOperations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(4026),
                            OperationAsString = ">",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(4030),
                            OperationAsString = ">=",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(4034),
                            OperationAsString = "<",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(4037),
                            OperationAsString = "<=",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(4041),
                            OperationAsString = "=",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(4043),
                            OperationAsString = "!=",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(4047),
                            OperationAsString = "is Empty",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(4049),
                            OperationAsString = "is not Empty",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.AttributeTableName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_AttributeTableName_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("AttributeTableNames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3833),
                            Name = "ProvidedForm",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3837),
                            Name = "Coordinator",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3840),
                            Name = "Arbitrator",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeOperationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DependencyGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("DynamicAttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MainDynamicAttributeId")
                        .HasColumnType("int");

                    b.Property<int?>("StaticAttributeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AttributeOperationId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Dependency_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("DependencyGroupId");

                    b.HasIndex("DynamicAttributeId");

                    b.HasIndex("MainDynamicAttributeId");

                    b.HasIndex("StaticAttributeId");

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.DependencyGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_DependencyGroup_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("DependencyGroup");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.DependencyValidation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeOperationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DependencyGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AttributeOperationId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_DependencyValidation_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("DependencyGroupId");

                    b.ToTable("DependencyValidations");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicPlaceHolder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttributeDataTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DynamicAttributeSectionId")
                        .HasColumnType("int");

                    b.Property<string>("EnglishLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishPlaceHolder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LinkedToAnotherAttribute")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxSizeInKB")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AttributeDataTypeId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_DynamicAttribute_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("DynamicAttributeSectionId");

                    b.ToTable("DynamicAttributes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicLabel = "اختبار نص 1",
                            ArabicPlaceHolder = "اختبار نص 1",
                            AttributeDataTypeId = 1,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1294),
                            DynamicAttributeSectionId = 1,
                            EnglishLabel = "Test Text 1",
                            EnglishPlaceHolder = "Test Text 1",
                            IsRequired = true,
                            IsUnique = true,
                            LinkedToAnotherAttribute = false,
                            Status = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicLabel = "اختبار ايميل 1",
                            ArabicPlaceHolder = "اختبار ايميل 1",
                            AttributeDataTypeId = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1302),
                            DynamicAttributeSectionId = 1,
                            EnglishLabel = "Test Email 1",
                            EnglishPlaceHolder = "Test Email 1",
                            IsRequired = true,
                            IsUnique = true,
                            LinkedToAnotherAttribute = false,
                            Status = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            ArabicLabel = "اختبار صورة 1",
                            ArabicPlaceHolder = "اختبار صورة 1",
                            AttributeDataTypeId = 3,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1306),
                            DynamicAttributeSectionId = 1,
                            EnglishLabel = "Test Image 1",
                            EnglishPlaceHolder = "Test Image 1",
                            IsRequired = false,
                            IsUnique = false,
                            LinkedToAnotherAttribute = false,
                            MaxSizeInKB = 1028,
                            Status = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            ArabicLabel = "اختبار ملف 1",
                            ArabicPlaceHolder = "اختبار ملف 1",
                            AttributeDataTypeId = 4,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1311),
                            DynamicAttributeSectionId = 1,
                            EnglishLabel = "Test File 1",
                            EnglishPlaceHolder = "Test File 1",
                            IsRequired = false,
                            IsUnique = false,
                            LinkedToAnotherAttribute = false,
                            MaxSizeInKB = 4112,
                            Status = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            ArabicLabel = "اختبار رقم متحرك 1",
                            ArabicPlaceHolder = "اختبار رقم متحرك 1",
                            AttributeDataTypeId = 5,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1316),
                            DynamicAttributeSectionId = 1,
                            EnglishLabel = "Test Phone Number 1",
                            EnglishPlaceHolder = "Test Phone Number 1",
                            IsRequired = false,
                            IsUnique = false,
                            LinkedToAnotherAttribute = false,
                            Status = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            ArabicLabel = "اختبار رقم 1",
                            ArabicPlaceHolder = "اختبار رقم 1",
                            AttributeDataTypeId = 6,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1336),
                            DynamicAttributeSectionId = 1,
                            EnglishLabel = "Test Number 1",
                            EnglishPlaceHolder = "Test Number 1",
                            IsRequired = false,
                            IsUnique = false,
                            LinkedToAnotherAttribute = false,
                            Status = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            ArabicLabel = "اختبار تاريخ 1",
                            ArabicPlaceHolder = "اختبار تاريخ 1",
                            AttributeDataTypeId = 7,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1340),
                            DynamicAttributeSectionId = 1,
                            EnglishLabel = "Test Date 1",
                            EnglishPlaceHolder = "Test Date 1",
                            IsRequired = false,
                            IsUnique = false,
                            LinkedToAnotherAttribute = false,
                            Status = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            ArabicLabel = "اختبار قائمة 1",
                            ArabicPlaceHolder = "اختبار قائمة 1",
                            AttributeDataTypeId = 8,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1344),
                            DynamicAttributeSectionId = 1,
                            EnglishLabel = "Test List 1",
                            EnglishPlaceHolder = "Test List 1",
                            IsRequired = false,
                            IsUnique = false,
                            LinkedToAnotherAttribute = false,
                            Status = 0,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttributeListValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DynamicAttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_DynamicAttributeListValue_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("DynamicAttributeId");

                    b.ToTable("DynamicAttributeListValues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1433),
                            DynamicAttributeId = 8,
                            Value = "Test Value 1",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1437),
                            DynamicAttributeId = 8,
                            Value = "Test Value 2",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1440),
                            DynamicAttributeId = 8,
                            Value = "Test Value 3",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1442),
                            DynamicAttributeId = 8,
                            Value = "Test Value 4",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1445),
                            DynamicAttributeId = 8,
                            Value = "Test Value 5",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttributePattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicPlaceHolder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishPlaceHolder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_DynamicAttributePattern_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("DynamicAttributePatterns");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttributePatternValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DynamicAttributePatternId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_DynamicAttributePatternValue_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("DynamicAttributePatternId");

                    b.ToTable("DynamicAttributePatternValues");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttributeSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttributeTableNameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecordIdOnRelation")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AttributeTableNameId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_DynamicAttributeSection_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("DynamicAttributeSections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicName = "اختبار اسم 1",
                            AttributeTableNameId = 1,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1208),
                            EnglishName = "Test Name 1",
                            RecordIdOnRelation = 1,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DynamicAttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordIdAsGuid")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_DynamicAttributeValue_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("DynamicAttributeId");

                    b.ToTable("DynamicAttributeValues");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.GeneralValidation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeOperationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DynamicAttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AttributeOperationId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_GeneralValidation_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("DynamicAttributeId");

                    b.ToTable("DynamicAttributeGeneralValidations");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.StaticAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttributeDataTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeTableNameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AttributeDataTypeId");

                    b.HasIndex("AttributeTableNameId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_StaticAttribute_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("StaticAttributes");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.EduInstitutionCoordinatorModel.EduInstitutionCoordinator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoordinatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationalInstitutionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_EduInstitutionCoordinator_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("EducationalInstitutionId");

                    b.ToTable("InstitutionCoordinators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoordinatorId = 10,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9813),
                            EducationalInstitutionId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CoordinatorId = 11,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9818),
                            EducationalInstitutionId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CoordinatorId = 12,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9821),
                            EducationalInstitutionId = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CoordinatorId = 13,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9827),
                            EducationalInstitutionId = 2,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.EducationCoordinatorModel.EduEntitiesCoordinator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoordinatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationalEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RelatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_EduEntitiesCoordinator_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("EducationalEntityId");

                    b.ToTable("EducationCoordinators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoordinatorId = 10,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9464),
                            EducationalEntityId = 1,
                            RelatedDate = new DateTime(2024, 4, 15, 15, 25, 1, 516, DateTimeKind.Local).AddTicks(9471),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CoordinatorId = 11,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9565),
                            EducationalEntityId = 1,
                            RelatedDate = new DateTime(2024, 4, 15, 15, 25, 1, 516, DateTimeKind.Local).AddTicks(9567),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CoordinatorId = 12,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9572),
                            EducationalEntityId = 2,
                            RelatedDate = new DateTime(2024, 4, 15, 15, 25, 1, 516, DateTimeKind.Local).AddTicks(9574),
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CoordinatorId = 13,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9579),
                            EducationalEntityId = 2,
                            RelatedDate = new DateTime(2024, 4, 15, 15, 25, 1, 516, DateTimeKind.Local).AddTicks(9580),
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.EducationalClassModel.EducationalClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_EducationalClass_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("EducationalClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicName = "الصف الأول",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(857),
                            EnglishName = "First class",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicName = "الصف الثاني",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(861),
                            EnglishName = "Second class",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            ArabicName = "الصف الثالث",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(863),
                            EnglishName = "Third class",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            ArabicName = "الصف الرابع",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(868),
                            EnglishName = "Forth class",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            ArabicName = "الصف الخامس",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(871),
                            EnglishName = "Fifth class",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            ArabicName = "الصف السادس",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(875),
                            EnglishName = "Sixth class",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            ArabicName = "الصف السابع",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(877),
                            EnglishName = "Seventh class",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            ArabicName = "الصف الثامن",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(880),
                            EnglishName = "Eighth class",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            ArabicName = "الصف التاسع",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(883),
                            EnglishName = "Ninth class",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            ArabicName = "الصف العاشر",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(886),
                            EnglishName = "Tenth class",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 11,
                            ArabicName = "الصف الحادي عشر",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(889),
                            EnglishName = "Eleventh class",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 12,
                            ArabicName = "الصف الثاني عشر",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(891),
                            EnglishName = "Twelfth class",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.EducationalEntityModel.EducationalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_EducationalEntity_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("EducationalEntities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicName = "جهة تعليمية 1",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9293),
                            EnglishName = "Educational Entity 1",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicName = "جهة تعليمية 2",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9299),
                            EnglishName = "Educational Entity 2",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.EducationalInstitutionModel.EducationalInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationalEntityId")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_EducationalInstitution_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("EducationalEntityId");

                    b.ToTable("EducationalInstitutions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicName = "مؤسسة تعليمية 1",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9378),
                            EducationalEntityId = 1,
                            EnglishName = "Educational Entity 1",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicName = "مؤسسة تعليمية 2",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9384),
                            EducationalEntityId = 2,
                            EnglishName = "Educational Entity 2",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.EventModel.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicSiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishSiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UniqueIntegerId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Event_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicDescription = "اختبار وصف حدث 1",
                            ArabicLocation = "اختبار موقع الفعالية 1",
                            ArabicName = "اختبار اسم حدث 1",
                            ArabicSiteName = "اختبار اسم مكان الحدث 1",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(1340),
                            EndDate = new DateTime(2024, 4, 20, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(1353),
                            EnglishDescription = "Test Event Description 1",
                            EnglishLocation = "Test Event Location 1",
                            EnglishName = "Test Event Name 1",
                            EnglishSiteName = "Test Event Site Name 1",
                            EventDate = new DateTime(2024, 4, 17, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(1365),
                            StartDate = new DateTime(2024, 4, 18, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(1367),
                            UniqueIntegerId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicDescription = "اختبار وصف حدث 2",
                            ArabicLocation = "اختبار موقع الفعالية 2",
                            ArabicName = "اختبار اسم حدث 2",
                            ArabicSiteName = "اختبار اسم مكان الحدث 2",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(1369),
                            EndDate = new DateTime(2024, 4, 23, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(1372),
                            EnglishDescription = "Test Event Description 2",
                            EnglishLocation = "Test Event Location 2",
                            EnglishName = "Test Event Name 2",
                            EnglishSiteName = "Test Event Site Name 2",
                            EventDate = new DateTime(2024, 4, 20, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(1374),
                            StartDate = new DateTime(2024, 4, 21, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(1375),
                            UniqueIntegerId = 2,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ExplanatoryGuideModel.ExplanatoryGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ExplanatoryGuide_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("ExplanatoryGuides");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ExtraAttachmentModel.ExtraAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttachmentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvidedFormId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredAttachmentNumber")
                        .HasColumnType("int");

                    b.Property<int>("SizeOfAttachmentInKB")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ExtraAttachment_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("ProvidedFormId");

                    b.ToTable("ExtraAttachments");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ExtraAttachmentProvidedFormModel.ExtraAttachmentFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExtraAttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ExtraAttachmentFile_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("ExtraAttachmentId");

                    b.ToTable("ExtraAttachmentsProvidedForms");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.FAQModel.FrequentlyAskedQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_FrequentlyAskedQuestion_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("FrequentlyAskedQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicAnswer = "يمكنك المشاركة في الجائزة من خلال اتباع الخطوات التالية:\r\nالنقر على \"بوابة المشتركين\" في القائمة الرئيسية للموقع.\r\nإذا لم يكن لديك حساب في البوابة، يرجى إنشاء حساب مستخدم جديد بالنقر على خيار \"سجل الآن\"، وقم بتعبئة البيانات المطلوبة.\r\nإذا كان لديك حساب مسبق في البوابة، يرجى النقر على خيار \"لقد قمت بالتسجيل مسبقاً\"، وقم بتسجيل الدخول بإدخال اسم المستخدم وكلمة المرور.\r\nبعد الدخول إلى البوابة، يمكنك التسجيل في الفئة التي ترغب بها ورفع المستندات المطلوبة.\r\nيمكنك رفع الأدلة بجانب كل معيار من معايير الفئة.",
                            ArabicQuestion = "كيف يمكنني الاشتراك بجائزة الشارقة للتفوق والتميز التربوي",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8978),
                            EnglishAnswer = "You can participate in the award by following the following steps:\r\nClick on “Subscribers Portal” in the main menu of the site.\r\nIf you do not have an account on the portal, please create a new user account by clicking on the “Register Now” option and filling out the required data.\r\nIf you already have an account on the portal, please click on the “I have already registered” option and log in by entering your username and password.\r\nAfter entering the portal, you can register in the category you desire and upload the required documents.\r\nYou can upload evidence next to each category criteria.",
                            EnglishQuestion = "How can I participate in the Sharjah Award for Excellence and Educational Excellence?",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicAnswer = "يمكنك المشاركة في الجائزة من خلال اتباع الخطوات التالية:\r\nالنقر على \"بوابة المشتركين\" في القائمة الرئيسية للموقع.\r\nإذا لم يكن لديك حساب في البوابة، يرجى إنشاء حساب مستخدم جديد بالنقر على خيار \"سجل الآن\"، وقم بتعبئة البيانات المطلوبة.\r\nإذا كان لديك حساب مسبق في البوابة، يرجى النقر على خيار \"لقد قمت بالتسجيل مسبقاً\"، وقم بتسجيل الدخول بإدخال اسم المستخدم وكلمة المرور.\r\nبعد الدخول إلى البوابة، يمكنك التسجيل في الفئة التي ترغب بها ورفع المستندات المطلوبة.\r\nيمكنك رفع الأدلة بجانب كل معيار من معايير الفئة. 2",
                            ArabicQuestion = "كيف يمكنني الاشتراك بجائزة الشارقة للتفوق والتميز التربوي 2",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8986),
                            EnglishAnswer = "You can participate in the award by following the following steps:\r\nClick on “Subscribers Portal” in the main menu of the site.\r\nIf you do not have an account on the portal, please create a new user account by clicking on the “Register Now” option and filling out the required data.\r\nIf you already have an account on the portal, please click on the “I have already registered” option and log in by entering your username and password.\r\nAfter entering the portal, you can register in the category you desire and upload the required documents.\r\nYou can upload evidence next to each category criteria 2.",
                            EnglishQuestion = "How can I participate in the Sharjah Award for Excellence and Educational Excellence? 2",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.GeneralFrequentlyAskedQuestionModel.GeneralFAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GeneralFrequentlyAskedQuestionCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_GeneralFAQ_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("GeneralFrequentlyAskedQuestionCategoryId");

                    b.ToTable("GeneralFAQs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicAnswer = "اختبار جواب 1",
                            ArabicQuestion = "اختبار سؤال 1",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3727),
                            EnglishAnswer = "Test Answer 1",
                            EnglishQuestion = "Test Question 1",
                            GeneralFrequentlyAskedQuestionCategoryId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicAnswer = "اختبار جواب 2",
                            ArabicQuestion = "اختبار سؤال 2",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3731),
                            EnglishAnswer = "Test Answer 2",
                            EnglishQuestion = "Test Question 2",
                            GeneralFrequentlyAskedQuestionCategoryId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            ArabicAnswer = "اختبار جواب 3",
                            ArabicQuestion = "اختبار سؤال 3",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3734),
                            EnglishAnswer = "Test Answer 3",
                            EnglishQuestion = "Test Question 3",
                            GeneralFrequentlyAskedQuestionCategoryId = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            ArabicAnswer = "اختبار جواب 4",
                            ArabicQuestion = "اختبار سؤال 4",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3737),
                            EnglishAnswer = "Test Answer 4",
                            EnglishQuestion = "Test Question 4",
                            GeneralFrequentlyAskedQuestionCategoryId = 2,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.GeneralFrequentlyAskedQuestionModel.GeneralFAQCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_GeneralFAQCategory_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("GeneralFAQCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicName = "اختبار فئة أسئلة شائعة عامة 1",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3618),
                            EnglishName = "Test General FAQ Category 1",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicName = "اختبار فئة أسئلة شائعة عامة 2",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3646),
                            EnglishName = "Test General FAQ Category 2",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.GeneralWorkshopsModel.GeneralWorkshop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgendaImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfWorkShop")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnale")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_GeneralWorkshop_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("GeneralWorkshops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicDescription = "اختبار وصف الورش العامة 1",
                            ArabicTitle = "اختبار عنوان الورش العامة 1",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3073),
                            DateOfWorkShop = new DateTime(2024, 4, 25, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3079),
                            DayName = "Thursday",
                            EnglishDescription = "Test General Workshop Description 1",
                            EnglishTitle = "Test General Workshop Title 1",
                            Thumbnale = "https://backend.stg.award-shj.ae/UploadedFiles/photo_2024-03-25_10-21-14.jpg",
                            Time = "10:00 - 12:00",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicDescription = "اختبار وصف الورش العامة 2",
                            ArabicTitle = "اختبار عنوان الورش العامة 2",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3311),
                            DateOfWorkShop = new DateTime(2024, 5, 5, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3314),
                            DayName = "Sunday",
                            EnglishDescription = "Test General Workshop Description 2",
                            EnglishTitle = "Test General Workshop Title 2",
                            Thumbnale = "https://backend.stg.award-shj.ae/UploadedFiles/photo_2024-03-25_10-21-14.jpg",
                            Time = "2:00 - 3:00",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.IdentityModels.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionHeaderId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Permission_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("PermissionHeaderId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.IdentityModels.PermissionHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_PermissionHeader_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("PermissionHeaders");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.IdentityModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Role_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicName = "ادمن",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnglishName = "Admin",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicName = "مشترك",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnglishName = "Subscriber",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            ArabicName = "مدير",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnglishName = "Manager",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            ArabicName = "مستخدم",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnglishName = "User",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            ArabicName = "منسق",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnglishName = "Coordinator",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            ArabicName = "محكم",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnglishName = "Arbitrator",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.IdentityModels.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_RolePermission_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.IdentityModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConfirmationCodeForForgetPassword")
                        .HasColumnType("int");

                    b.Property<int?>("ConfirmationCodeForResetPassword")
                        .HasColumnType("int");

                    b.Property<int?>("ConfirmationCodeForSignUp")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfGroupCategories")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfIndividualCategories")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriberId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TrainingWorkshopId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("isValidAccount")
                        .HasColumnType("bit");

                    b.Property<string>("lang")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_User_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("SubscriberId")
                        .IsUnique()
                        .HasFilter("[SubscriberId] IS NOT NULL");

                    b.HasIndex("TrainingWorkshopId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            ArabicName = "منسق 1",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9197),
                            Email = "Coordinator@Coordinator.com",
                            EnglishName = "Coordinator 1",
                            Gender = 0,
                            NumberOfGroupCategories = 0,
                            NumberOfIndividualCategories = 0,
                            Password = "vO2sa5VimvnqRAqRbqHARyr9kG2rrXN6brfIXLU4ikM=",
                            PhoneNumber = "0993521579",
                            isDeleted = false,
                            isValidAccount = true
                        },
                        new
                        {
                            Id = 11,
                            ArabicName = "منسق 2",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9205),
                            Email = "Coordinator2@Coordinator2.com",
                            EnglishName = "Coordinator 2",
                            Gender = 0,
                            NumberOfGroupCategories = 0,
                            NumberOfIndividualCategories = 0,
                            Password = "vO2sa5VimvnqRAqRbqHARyr9kG2rrXN6brfIXLU4ikM=",
                            PhoneNumber = "0993521579",
                            isDeleted = false,
                            isValidAccount = true
                        },
                        new
                        {
                            Id = 12,
                            ArabicName = "منسق 3",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9209),
                            Email = "Coordinator3@Coordinator3.com",
                            EnglishName = "Coordinator 3",
                            Gender = 0,
                            NumberOfGroupCategories = 0,
                            NumberOfIndividualCategories = 0,
                            Password = "vO2sa5VimvnqRAqRbqHARyr9kG2rrXN6brfIXLU4ikM=",
                            PhoneNumber = "0993521579",
                            isDeleted = false,
                            isValidAccount = true
                        },
                        new
                        {
                            Id = 13,
                            ArabicName = "منسق 4",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9214),
                            Email = "Coordinator4@Coordinator4.com",
                            EnglishName = "Coordinator 4",
                            Gender = 0,
                            NumberOfGroupCategories = 0,
                            NumberOfIndividualCategories = 0,
                            Password = "vO2sa5VimvnqRAqRbqHARyr9kG2rrXN6brfIXLU4ikM=",
                            PhoneNumber = "0993521579",
                            isDeleted = false,
                            isValidAccount = true
                        },
                        new
                        {
                            Id = 1,
                            ArabicName = "ادمن 123",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(632),
                            Email = "ahmad.a.ahmad.100011@gmail.com",
                            EnglishName = "Admin 123",
                            Gender = 0,
                            NumberOfGroupCategories = 0,
                            NumberOfIndividualCategories = 0,
                            Password = "vO2sa5VimvnqRAqRbqHARyr9kG2rrXN6brfIXLU4ikM=",
                            PhoneNumber = "0993521579",
                            isDeleted = false,
                            isValidAccount = true
                        },
                        new
                        {
                            Id = 2,
                            ArabicName = "ادمن 123 #",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(637),
                            Email = "Ahmad@Ahmad.com",
                            EnglishName = "Admin 123 #",
                            Gender = 0,
                            NumberOfGroupCategories = 0,
                            NumberOfIndividualCategories = 0,
                            Password = "vO2sa5VimvnqRAqRbqHARyr9kG2rrXN6brfIXLU4ikM=",
                            PhoneNumber = "0993521579",
                            isDeleted = false,
                            isValidAccount = true
                        },
                        new
                        {
                            Id = 3,
                            ArabicName = "ادمن 123 ##",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(641),
                            Email = "Ahmad2@Ahmad2.com",
                            EnglishName = "Admin 123 ##",
                            Gender = 0,
                            NumberOfGroupCategories = 0,
                            NumberOfIndividualCategories = 0,
                            Password = "vO2sa5VimvnqRAqRbqHARyr9kG2rrXN6brfIXLU4ikM=",
                            PhoneNumber = "0993521579",
                            isDeleted = false,
                            isValidAccount = true
                        },
                        new
                        {
                            Id = 4,
                            ArabicName = "ادمن 123 ##@",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(646),
                            Email = "Ahmad3@Ahmad3.com",
                            EnglishName = "Admin 123 ##@",
                            Gender = 0,
                            NumberOfGroupCategories = 0,
                            NumberOfIndividualCategories = 0,
                            Password = "vO2sa5VimvnqRAqRbqHARyr9kG2rrXN6brfIXLU4ikM=",
                            PhoneNumber = "0993521579",
                            isDeleted = false,
                            isValidAccount = true
                        },
                        new
                        {
                            Id = 5,
                            ArabicName = "ادمن 123 ##@@",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(651),
                            Email = "Ahmad4@Ahmad4.com",
                            EnglishName = "Admin 123 ##@@",
                            Gender = 0,
                            NumberOfGroupCategories = 0,
                            NumberOfIndividualCategories = 0,
                            Password = "vO2sa5VimvnqRAqRbqHARyr9kG2rrXN6brfIXLU4ikM=",
                            PhoneNumber = "0993521579",
                            isDeleted = false,
                            isValidAccount = true
                        },
                        new
                        {
                            Id = 6,
                            ArabicName = "تامر",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(655),
                            Email = "tamer@gmail.com",
                            EnglishName = "Tamer",
                            Gender = 0,
                            NumberOfGroupCategories = 0,
                            NumberOfIndividualCategories = 0,
                            Password = "vO2sa5VimvnqRAqRbqHARyr9kG2rrXN6brfIXLU4ikM=",
                            PhoneNumber = "0993521579",
                            SubscriberId = "ABC123",
                            isDeleted = false,
                            isValidAccount = true
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.IdentityModels.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_UserRole_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 5,
                            UserId = 10,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 5,
                            UserId = 11,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 5,
                            UserId = 12,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 5,
                            UserId = 13,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 1,
                            UserId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 1,
                            UserId = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 1,
                            UserId = 3,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 1,
                            UserId = 4,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 1,
                            UserId = 5,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 6,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.InstructionModel.Instruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Instruction_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Instructions");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.InterviewModel.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Interview_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Interview");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.InvitationModels.GroupInvitee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActualNumberOfAttendees")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("ExpectedNumberOfAttendees")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniqueIntegerId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_GroupInvitee_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("EventId");

                    b.HasIndex("Email", "isDeleted")
                        .IsUnique()
                        .HasFilter("[isDeleted] = 0");

                    b.ToTable("GroupInvitees");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.InvitationModels.PersonalInvitee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Employer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAttend")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfInvitee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniqueIntegerId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_PersonalInvitee_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("EventId");

                    b.HasIndex("Email", "isDeleted")
                        .IsUnique()
                        .HasFilter("[isDeleted] = 0");

                    b.ToTable("Personalnvitees");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.InvitationModels.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupInviteeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Student_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("GroupInviteeId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.MeetingModel.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Meeting_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("categoryId");

                    b.ToTable("Meeting");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.MeetingSubscriberModel.MeetingSubscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("meetingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("meetingId");

                    b.ToTable("MeetingSubscriber");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.MeetingUserModel.MeetingUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UserId");

                    b.ToTable("MeetingUser");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.NewsModel.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_News_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("CycleId");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicDescription = "اختبار وصف أخبار 1",
                            ArabicTitle = "اختبار عنوان أخبار 1",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8546),
                            CycleId = 1,
                            EnglishDescription = "Test News Description 1",
                            EnglishTitle = "Test News Title 1",
                            Image = "https://backend.stg.award-shj.ae/UploadedFiles/02ef2561-b108-4b12-8a3f-6734b4e0345f.jpg",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicDescription = "اختبار وصف أخبار 2",
                            ArabicTitle = "اختبار عنوان أخبار 2",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8552),
                            CycleId = 1,
                            EnglishDescription = "Test News Description 2",
                            EnglishTitle = "Test News Title 2",
                            Image = "https://backend.stg.award-shj.ae/UploadedFiles/1dd2958e-d80c-48d0-9a28-899d66fded8d.jpg",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.NoteModel.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArbitrationId")
                        .HasColumnType("int");

                    b.Property<string>("EnglishText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArbitrationId");

                    b.HasIndex("UserId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.OnePageTextModel.OnePageText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("OnePageText");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicText = "سياسة الخصوصية",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3554),
                            EnglishText = "Privacy Policy",
                            Type = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicText = "شروط الاستخدام",
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 515, DateTimeKind.Utc).AddTicks(3558),
                            EnglishText = "Terms Of Use",
                            Type = 1,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ProvidedFormModel.ProvidedForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryEducationalClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentStep")
                        .HasColumnType("int");

                    b.Property<int>("CycleNumber")
                        .HasColumnType("int");

                    b.Property<string>("CycleYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("FinalScore")
                        .HasColumnType("real");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PercentCompletion")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubscriberType")
                        .HasColumnType("int");

                    b.Property<int>("TotalStep")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryEducationalClassId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ProvidedForm_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[isDeleted] = 0");

                    b.HasIndex("categoryId");

                    b.HasIndex("userId");

                    b.ToTable("ProvidedForms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1128),
                            CurrentStep = 1,
                            CycleNumber = 1,
                            CycleYear = "2023-2024",
                            FinalScore = 0f,
                            PercentCompletion = 1,
                            Status = 0,
                            SubscriberType = 0,
                            TotalStep = 7,
                            Type = 0,
                            categoryId = 2,
                            isDeleted = false,
                            userId = 1
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.RelatedAccountModel.RelatedAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User1Id")
                        .HasColumnType("int");

                    b.Property<int>("User2Id")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_RelatedAccount_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("RelatedAccounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1064),
                            User1Id = 1,
                            User2Id = 4,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(1067),
                            User1Id = 1,
                            User2Id = 5,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.RelatedAccountModel.RelatedAccountRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_RelatedAccountRequest_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("RelatedAccountRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(982),
                            ReceiverId = 1,
                            SenderId = 2,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 517, DateTimeKind.Utc).AddTicks(987),
                            ReceiverId = 1,
                            SenderId = 3,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ScaleModel.Scale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CriterionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<int>("MinScore")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Scale_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("CriterionId");

                    b.ToTable("Scale");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.SubscriberInterviewModel.SubscriberInterview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.HasIndex("UserId");

                    b.ToTable("SubscriberInterview");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.SystemAttachmentModel.CycleConditionAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachementPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CycleConditionsProvidedFormId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SizeOfAttachmentInKB")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_CycleConditionAttachment_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("CycleConditionsProvidedFormId");

                    b.ToTable("CycleConditionAttachments");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.TermsAndConditionsModel.TermAndCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AttachmentType")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAgree")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSpecial")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NeedAttachment")
                        .HasColumnType("bit");

                    b.Property<int?>("RequiredAttachmentNumber")
                        .HasColumnType("int");

                    b.Property<int?>("SizeOfAttachmentInKB")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_TermAndCondition_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("TermsAndConditions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicDescription = "الموافقة على سياسة الخصوصية لهذه الفئة",
                            ArabicTitle = "الموافقة على سياسة الخصوصة",
                            AttachmentType = 0,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9901),
                            EnglishDescription = "Accept on Privacy Term",
                            EnglishTitle = "Accept on Privacy Term",
                            IsAgree = false,
                            IsSpecial = true,
                            NeedAttachment = false,
                            RequiredAttachmentNumber = 0,
                            SizeOfAttachmentInKB = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicDescription = "الموافقة على سياسة الخصوصية لهذه الفئة",
                            ArabicTitle = "الموافقة على سياسة الخصوصة",
                            AttachmentType = 0,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9913),
                            EnglishDescription = "Accept on Privacy Term",
                            EnglishTitle = "Accept on Privacy Term",
                            IsAgree = false,
                            IsSpecial = false,
                            NeedAttachment = false,
                            RequiredAttachmentNumber = 0,
                            SizeOfAttachmentInKB = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            ArabicDescription = "الهوية الشخصية",
                            ArabicTitle = "رفع صورة الهوية الشخصية (الامامي و الخلفي)",
                            AttachmentType = 0,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9917),
                            EnglishDescription = "Id Card",
                            EnglishTitle = "Upload Photos of Id Card (Front and Back)",
                            IsAgree = false,
                            IsSpecial = false,
                            NeedAttachment = true,
                            RequiredAttachmentNumber = 2,
                            SizeOfAttachmentInKB = 1000,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            ArabicDescription = "الهوية الشخصية",
                            ArabicTitle = "رفع صورة الهوية الشخصية (الامامي و الخلفي)",
                            AttachmentType = 0,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9923),
                            EnglishDescription = "Id Card",
                            EnglishTitle = "Upload Photos of Id Card (Front and Back)",
                            IsAgree = false,
                            IsSpecial = true,
                            NeedAttachment = true,
                            RequiredAttachmentNumber = 2,
                            SizeOfAttachmentInKB = 1000,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            ArabicDescription = "رفع الاثباتات العلمية",
                            ArabicTitle = "رفع الاثباتات العلمية",
                            AttachmentType = 1,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9927),
                            EnglishDescription = "Upload Confirmation Documents",
                            EnglishTitle = "Upload Confirmation Documents",
                            IsAgree = false,
                            IsSpecial = true,
                            NeedAttachment = true,
                            RequiredAttachmentNumber = 0,
                            SizeOfAttachmentInKB = 1000,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            ArabicDescription = "رفع الاثباتات العلمية",
                            ArabicTitle = "رفع الاثباتات العلمية",
                            AttachmentType = 1,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(9932),
                            EnglishDescription = "Upload Confirmation Documents",
                            EnglishTitle = "Upload Confirmation Documents",
                            IsAgree = false,
                            IsSpecial = false,
                            NeedAttachment = true,
                            RequiredAttachmentNumber = 0,
                            SizeOfAttachmentInKB = 1000,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.TrainingWorkshopModel.TrainingWorkshop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_TrainingWorkshop_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.ToTable("TrainingWorkshops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArabicDescription = "اختبار وصف ورشة تدريبية 1",
                            ArabicTitle = "اختبار عنوان ورشة تدريبية 1",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8894),
                            EnglishDescription = "Test Training Workshop Description 1",
                            EnglishTitle = "Test Training Workshop Title 1",
                            Thumbnail = "https://backend.stg.award-shj.ae/UploadedFiles/photo_2024-03-25_10-21-14.jpg",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            ArabicDescription = "اختبار وصف ورشة تدريبية 2",
                            ArabicTitle = "اختبار عنوان ورشة تدريبية 2",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 4, 15, 13, 25, 1, 516, DateTimeKind.Utc).AddTicks(8901),
                            EnglishDescription = "Test Training Workshop Description 2",
                            EnglishTitle = "Test Training Workshop Title 2",
                            Thumbnail = "https://backend.stg.award-shj.ae/UploadedFiles/photo_2024-03-25_10-21-14.jpg",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.TrainingWorkshopSubscriberModel.TrainingWorkshopSubscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainingWorkshopsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_TrainingWorkshopSubscriber_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("CreatedById");

                    b.HasIndex("TrainingWorkshopsId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingWorkshopSubscribers");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.TrainingWrokshopeAttachments.TrainingWrokshopeAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachementPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttachmentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SizeOfAttachmentInKB")
                        .HasColumnType("int");

                    b.Property<int>("WorkshopeId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_TrainingWrokshopeAttachment_CreatedAt")
                        .HasAnnotation("SqlServer:Descending", true);

                    b.HasIndex("WorkshopeId");

                    b.ToTable("TrainingWrokshopeAttachment");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.AboutAwardPageModel.OurGoal", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.AboutAwardPageModel.AboutAwardPage", "AboutAwardPage")
                        .WithMany("OurGoals")
                        .HasForeignKey("AboutAwardPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutAwardPage");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.AchievementModel.Achievement", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.AgendaModel.Agenda", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CycleModel.Cycle", "Cycle")
                        .WithMany("Agendas")
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cycle");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ArbitrationModel.Arbitration", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.ArbitratorModel.Arbitrator", "Arbitrator")
                        .WithMany("Arbitration")
                        .HasForeignKey("ArbitratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.ProvidedFormModel.ProvidedForm", "ProvidedForm")
                        .WithMany()
                        .HasForeignKey("ProvidedFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arbitrator");

                    b.Navigation("ProvidedForm");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ArbitrationProcedureModel.ArbitrationProcedure", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ArbitratorClassModel.ArbitratorClass", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.ArbitratorModel.Arbitrator", "Arbitrator")
                        .WithMany("ArbitratorClasses")
                        .HasForeignKey("ArbitratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.EducationalClassModel.EducationalClass", "EducationalClass")
                        .WithMany()
                        .HasForeignKey("EducationalClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arbitrator");

                    b.Navigation("EducationalClass");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ArbitratorInterviewModel.ArbitratorInterview", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.ArbitratorModel.Arbitrator", "Arbitrator")
                        .WithMany("ArbitratorInterviews")
                        .HasForeignKey("ArbitratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.InterviewModel.Interview", "Interview")
                        .WithMany("ArbitratorInterviews")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arbitrator");

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.AttachmentModel.ConditionAttachment", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.ConditionsProvidedFormsModel.ConditionsProvidedForms", "ConditionsProvidedForms")
                        .WithMany("Attachments")
                        .HasForeignKey("ConditionsProvidedFormsId");

                    b.Navigation("ConditionsProvidedForms");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CategoryArbitratorModel.CategoryArbitrator", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.ArbitratorModel.Arbitrator", "Arbitrator")
                        .WithMany()
                        .HasForeignKey("ArbitratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.CategoryModel.Category", "Category")
                        .WithMany("CategoryArbitrators")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arbitrator");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CategoryCommitteeModel.CategoryCommittee", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CategoryModel.Category", "Category")
                        .WithMany("CategoryCommittees")
                        .HasForeignKey("CategoryId");

                    b.HasOne("SharijhaAward.Domain.Entities.CommitteeModel.Committee", "Committee")
                        .WithMany("CategoryCommittees")
                        .HasForeignKey("CommitteeId");

                    b.Navigation("Category");

                    b.Navigation("Committee");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CategoryEducationalClassModel.CategoryEducationalClass", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CategoryModel.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.EducationalClassModel.EducationalClass", "EducationalClass")
                        .WithMany()
                        .HasForeignKey("EducationalClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("EducationalClass");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CategoryFAQ.CategoryFAQ", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CategoryModel.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CategoryModel.Category", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CycleModel.Cycle", "Cycle")
                        .WithMany("Categories")
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.CategoryModel.Category", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Cycle");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CommitteeModel.Committee", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CategoryModel.Category", null)
                        .WithMany("Committees")
                        .HasForeignKey("CategoryId");

                    b.HasOne("SharijhaAward.Domain.Entities.ArbitratorModel.Arbitrator", "Chairman")
                        .WithMany()
                        .HasForeignKey("ChairmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chairman");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ConditionsProvidedFormsModel.ConditionsProvidedForms", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.ProvidedFormModel.ProvidedForm", "ProvidedForm")
                        .WithMany()
                        .HasForeignKey("ProvidedFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.TermsAndConditionsModel.TermAndCondition", "TermAndCondition")
                        .WithMany("ConditionAttachments")
                        .HasForeignKey("TermAndConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProvidedForm");

                    b.Navigation("TermAndCondition");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CriterionItemModel.CriterionItem", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CriterionModel.Criterion", "Criterion")
                        .WithMany()
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.ScaleModel.Scale", null)
                        .WithMany("CriterionItems")
                        .HasForeignKey("ScaleId");

                    b.Navigation("Criterion");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CriterionItemModel.CriterionItemAttachment", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CriterionItemModel.CriterionItem", "CriterionItem")
                        .WithMany()
                        .HasForeignKey("CriterionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.ProvidedFormModel.ProvidedForm", "ProvidedForm")
                        .WithMany()
                        .HasForeignKey("ProvidedFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CriterionItem");

                    b.Navigation("ProvidedForm");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CriterionItemScaleModel.CriterionItemScale", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CriterionItemModel.CriterionItem", "CriterionItem")
                        .WithMany()
                        .HasForeignKey("CriterionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.ScaleModel.Scale", "Scale")
                        .WithMany("CriterionItemScales")
                        .HasForeignKey("ScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CriterionItem");

                    b.Navigation("Scale");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CriterionModel.Criterion", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.ArbitrationProcedureModel.ArbitrationProcedure", null)
                        .WithMany("Criteria")
                        .HasForeignKey("ArbitrationProcedureId");

                    b.HasOne("SharijhaAward.Domain.Entities.CategoryModel.Category", "Category")
                        .WithMany("Criterions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.CriterionModel.Criterion", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Category");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CriterionModel.CriterionAttachment", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CriterionModel.Criterion", "Criterion")
                        .WithMany()
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.ProvidedFormModel.ProvidedForm", "ProvidedForm")
                        .WithMany()
                        .HasForeignKey("ProvidedFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion");

                    b.Navigation("ProvidedForm");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CycleConditionModel.CycleCondition", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CycleModel.Cycle", "Cycle")
                        .WithMany("CycleConditions")
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cycle");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CycleConditionsProvidedFormModel.CycleConditionsProvidedForm", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CycleConditionModel.CycleCondition", "CycleCondition")
                        .WithMany("ConditionAttachments")
                        .HasForeignKey("CycleConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.ProvidedFormModel.ProvidedForm", "ProvidedForm")
                        .WithMany()
                        .HasForeignKey("ProvidedFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CycleCondition");

                    b.Navigation("ProvidedForm");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.Dependency", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.AttributeOperation", "AttributeOperation")
                        .WithMany()
                        .HasForeignKey("AttributeOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.DependencyGroup", "DependencyGroup")
                        .WithMany()
                        .HasForeignKey("DependencyGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttribute", "DynamicAttribute")
                        .WithMany()
                        .HasForeignKey("DynamicAttributeId");

                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttribute", "MainDynamicAttribute")
                        .WithMany()
                        .HasForeignKey("MainDynamicAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.StaticAttribute", "StaticAttribute")
                        .WithMany()
                        .HasForeignKey("StaticAttributeId");

                    b.Navigation("AttributeOperation");

                    b.Navigation("DependencyGroup");

                    b.Navigation("DynamicAttribute");

                    b.Navigation("MainDynamicAttribute");

                    b.Navigation("StaticAttribute");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.DependencyValidation", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.AttributeOperation", "AttributeOperation")
                        .WithMany()
                        .HasForeignKey("AttributeOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.DependencyGroup", "DependencyGroup")
                        .WithMany()
                        .HasForeignKey("DependencyGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeOperation");

                    b.Navigation("DependencyGroup");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttribute", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.AttributeDataType", "AttributeDataType")
                        .WithMany()
                        .HasForeignKey("AttributeDataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttributeSection", "DynamicAttributeSection")
                        .WithMany()
                        .HasForeignKey("DynamicAttributeSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeDataType");

                    b.Navigation("DynamicAttributeSection");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttributeListValue", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttribute", "DynamicAttribute")
                        .WithMany()
                        .HasForeignKey("DynamicAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicAttribute");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttributePatternValue", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttributePattern", "DynamicAttributePattern")
                        .WithMany()
                        .HasForeignKey("DynamicAttributePatternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicAttributePattern");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttributeSection", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.AttributeTableName", "AttributeTableName")
                        .WithMany()
                        .HasForeignKey("AttributeTableNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeTableName");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttributeValue", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttribute", "DynamicAttribute")
                        .WithMany()
                        .HasForeignKey("DynamicAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicAttribute");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.GeneralValidation", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.AttributeOperation", "AttributeOperation")
                        .WithMany()
                        .HasForeignKey("AttributeOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.DynamicAttribute", "DynamicAttribute")
                        .WithMany()
                        .HasForeignKey("DynamicAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeOperation");

                    b.Navigation("DynamicAttribute");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.DynamicAttributeModel.StaticAttribute", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.AttributeDataType", "AttributeDataType")
                        .WithMany()
                        .HasForeignKey("AttributeDataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.DynamicAttributeModel.AttributeTableName", "AttributeTableName")
                        .WithMany()
                        .HasForeignKey("AttributeTableNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeDataType");

                    b.Navigation("AttributeTableName");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.EduInstitutionCoordinatorModel.EduInstitutionCoordinator", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CoordinatorModel.Coordinator", "Coordinator")
                        .WithMany("InstitutionCoordinators")
                        .HasForeignKey("CoordinatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.EducationalInstitutionModel.EducationalInstitution", "EducationalInstitution")
                        .WithMany()
                        .HasForeignKey("EducationalInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coordinator");

                    b.Navigation("EducationalInstitution");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.EducationCoordinatorModel.EduEntitiesCoordinator", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CoordinatorModel.Coordinator", "Coordinator")
                        .WithMany("EducationCoordinators")
                        .HasForeignKey("CoordinatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.EducationalEntityModel.EducationalEntity", "EducationalEntity")
                        .WithMany()
                        .HasForeignKey("EducationalEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coordinator");

                    b.Navigation("EducationalEntity");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.EducationalInstitutionModel.EducationalInstitution", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.EducationalEntityModel.EducationalEntity", "EducationalEntity")
                        .WithMany("Institutions")
                        .HasForeignKey("EducationalEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalEntity");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ExplanatoryGuideModel.ExplanatoryGuide", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CategoryModel.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ExtraAttachmentModel.ExtraAttachment", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.ProvidedFormModel.ProvidedForm", "ProvidedForm")
                        .WithMany()
                        .HasForeignKey("ProvidedFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProvidedForm");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ExtraAttachmentProvidedFormModel.ExtraAttachmentFile", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.ExtraAttachmentModel.ExtraAttachment", "ExtraAttachment")
                        .WithMany("ExtraAttachmentFiles")
                        .HasForeignKey("ExtraAttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraAttachment");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.FAQModel.FrequentlyAskedQuestion", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CategoryModel.Category", "Category")
                        .WithMany("FrequentlyAskedQuestions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.GeneralFrequentlyAskedQuestionModel.GeneralFAQ", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.GeneralFrequentlyAskedQuestionModel.GeneralFAQCategory", "GeneralFrequentlyAskedQuestionCategory")
                        .WithMany()
                        .HasForeignKey("GeneralFrequentlyAskedQuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralFrequentlyAskedQuestionCategory");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.IdentityModels.Permission", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.PermissionHeader", "PermissionHeader")
                        .WithMany()
                        .HasForeignKey("PermissionHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionHeader");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.IdentityModels.RolePermission", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.IdentityModels.User", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.TrainingWorkshopModel.TrainingWorkshop", null)
                        .WithMany("Users")
                        .HasForeignKey("TrainingWorkshopId");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.IdentityModels.UserRole", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.InterviewModel.Interview", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.InvitationModels.GroupInvitee", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.EventModel.Event", "Event")
                        .WithMany("GroupInvitees")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.InvitationModels.PersonalInvitee", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.EventModel.Event", "Event")
                        .WithMany("PersonalInvitees")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.InvitationModels.Student", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.InvitationModels.GroupInvitee", "GroupInvitee")
                        .WithMany("StudentNames")
                        .HasForeignKey("GroupInviteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupInvitee");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.MeetingModel.Meeting", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.CategoryModel.Category", "Category")
                        .WithMany("Meetings")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.MeetingSubscriberModel.MeetingSubscriber", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.MeetingModel.Meeting", "Meeting")
                        .WithMany("MeetingSubscribers")
                        .HasForeignKey("meetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.MeetingUserModel.MeetingUser", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.MeetingModel.Meeting", "Meeting")
                        .WithMany("MeetingUsers")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "User")
                        .WithMany("MeetingUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.NewsModel.News", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CycleModel.Cycle", "Cycle")
                        .WithMany("News")
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cycle");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.NoteModel.Note", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.ArbitrationProcedureModel.ArbitrationProcedure", "ArbitrationProcedure")
                        .WithMany("Notes")
                        .HasForeignKey("ArbitrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArbitrationProcedure");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ProvidedFormModel.ProvidedForm", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CategoryEducationalClassModel.CategoryEducationalClass", "CategoryEducationalClass")
                        .WithMany()
                        .HasForeignKey("CategoryEducationalClassId");

                    b.HasOne("SharijhaAward.Domain.Entities.CategoryModel.Category", "Category")
                        .WithMany("ProvidedForms")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CategoryEducationalClass");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.RelatedAccountModel.RelatedAccount", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.RelatedAccountModel.RelatedAccountRequest", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ScaleModel.Scale", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CriterionModel.Criterion", "Criterion")
                        .WithMany("Scales")
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.SubscriberInterviewModel.SubscriberInterview", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.InterviewModel.Interview", "Interview")
                        .WithMany("SubscriberInterviews")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.SystemAttachmentModel.CycleConditionAttachment", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CycleConditionsProvidedFormModel.CycleConditionsProvidedForm", "CycleConditionsProvidedForm")
                        .WithMany("Attachments")
                        .HasForeignKey("CycleConditionsProvidedFormId");

                    b.Navigation("CycleConditionsProvidedForm");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.TermsAndConditionsModel.TermAndCondition", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CategoryModel.Category", "Category")
                        .WithMany("TermsAndConditions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.TrainingWorkshopModel.TrainingWorkshop", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.CategoryModel.Category", "Category")
                        .WithMany("TrainingWorkshops")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.TrainingWorkshopSubscriberModel.TrainingWorkshopSubscriber", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.TrainingWorkshopModel.TrainingWorkshop", "TrainingWorkshop")
                        .WithMany("TrainingWorkshopSubscribers")
                        .HasForeignKey("TrainingWorkshopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SharijhaAward.Domain.Entities.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("TrainingWorkshop");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.TrainingWrokshopeAttachments.TrainingWrokshopeAttachment", b =>
                {
                    b.HasOne("SharijhaAward.Domain.Entities.TrainingWorkshopModel.TrainingWorkshop", "TrainingWorkshop")
                        .WithMany("Attachments")
                        .HasForeignKey("WorkshopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingWorkshop");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.AboutAwardPageModel.AboutAwardPage", b =>
                {
                    b.Navigation("OurGoals");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ArbitrationProcedureModel.ArbitrationProcedure", b =>
                {
                    b.Navigation("Criteria");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ArbitratorModel.Arbitrator", b =>
                {
                    b.Navigation("Arbitration");

                    b.Navigation("ArbitratorClasses");

                    b.Navigation("ArbitratorInterviews");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CategoryModel.Category", b =>
                {
                    b.Navigation("CategoryArbitrators");

                    b.Navigation("CategoryCommittees");

                    b.Navigation("Committees");

                    b.Navigation("Criterions");

                    b.Navigation("FrequentlyAskedQuestions");

                    b.Navigation("Meetings");

                    b.Navigation("ProvidedForms");

                    b.Navigation("TermsAndConditions");

                    b.Navigation("TrainingWorkshops");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CommitteeModel.Committee", b =>
                {
                    b.Navigation("CategoryCommittees");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ConditionsProvidedFormsModel.ConditionsProvidedForms", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CoordinatorModel.Coordinator", b =>
                {
                    b.Navigation("EducationCoordinators");

                    b.Navigation("InstitutionCoordinators");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CriterionModel.Criterion", b =>
                {
                    b.Navigation("Scales");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CycleConditionModel.CycleCondition", b =>
                {
                    b.Navigation("ConditionAttachments");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CycleConditionsProvidedFormModel.CycleConditionsProvidedForm", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.CycleModel.Cycle", b =>
                {
                    b.Navigation("Agendas");

                    b.Navigation("Categories");

                    b.Navigation("CycleConditions");

                    b.Navigation("News");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.EducationalEntityModel.EducationalEntity", b =>
                {
                    b.Navigation("Institutions");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.EventModel.Event", b =>
                {
                    b.Navigation("GroupInvitees");

                    b.Navigation("PersonalInvitees");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ExtraAttachmentModel.ExtraAttachment", b =>
                {
                    b.Navigation("ExtraAttachmentFiles");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.IdentityModels.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.IdentityModels.User", b =>
                {
                    b.Navigation("MeetingUsers");

                    b.Navigation("Notes");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.InterviewModel.Interview", b =>
                {
                    b.Navigation("ArbitratorInterviews");

                    b.Navigation("SubscriberInterviews");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.InvitationModels.GroupInvitee", b =>
                {
                    b.Navigation("StudentNames");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.MeetingModel.Meeting", b =>
                {
                    b.Navigation("MeetingSubscribers");

                    b.Navigation("MeetingUsers");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.ScaleModel.Scale", b =>
                {
                    b.Navigation("CriterionItemScales");

                    b.Navigation("CriterionItems");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.TermsAndConditionsModel.TermAndCondition", b =>
                {
                    b.Navigation("ConditionAttachments");
                });

            modelBuilder.Entity("SharijhaAward.Domain.Entities.TrainingWorkshopModel.TrainingWorkshop", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("TrainingWorkshopSubscribers");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
